// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var Query = (function () {
    function Query(executeQueryFn) {
        if (!executeQueryFn)
            throw new ReferenceError('executeQueryFn cannot be \'' + executeQueryFn + '\'');
        if (typeof executeQueryFn !== 'function')
            throw new TypeError('executeQueryFn cannot be \'' + typeof executeQueryFn + '\'');
        this._executeQueryFn = executeQueryFn;
        this.hasMoreResults = true;
        this.continuationToken = null;
    }
    /**
     * @method              module:azure-iot-provisioning-service.Query#next
     * @description         Gets the next page of results for this query.
     * @param {string}      continuationToken    Continuation Token used for paging through results (optional)
     * @param {Function}    done                 The callback that will be called with either an Error object or
     *                                           the results of the query.
     */
    Query.prototype.next = function (continuationTokenOrCallback, done) {
        var _this = this;
        var actualContinuationToken = this.continuationToken;
        var actualCallback;
        if (typeof continuationTokenOrCallback === 'function' && !done) {
            actualCallback = continuationTokenOrCallback;
        }
        else {
            actualContinuationToken = continuationTokenOrCallback;
            actualCallback = done;
        }
        this._executeQueryFn(actualContinuationToken, function (err, result, response) {
            if (err) {
                actualCallback(err);
            }
            else {
                _this.continuationToken = response.headers['x-ms-continuation'];
                _this.hasMoreResults = _this.continuationToken !== undefined;
                /*Codes_SRS_NODE_SERVICE_QUERY_16_007: [The `next` method shall call the `done` callback with a `null` error object, the results of the query and the response of the underlying transport if the request was successful.]*/
                actualCallback(null, result, response);
            }
        });
    };
    return Query;
}());
exports.Query = Query;
//# sourceMappingURL=query.js.map